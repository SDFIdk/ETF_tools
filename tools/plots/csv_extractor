import os
import re
import csv
import rasterio
import numpy as np
from shapely.geometry import Point
from rasterio.features import geometry_mask
from rasterio.windows import from_bounds
from pyproj import Transformer

def sample_geotiffs_in_radius(folder, lat, lon, source, radius=25):
    """
    Samples GeoTIFFs in a specified folder within a radius around a given lat/lon point,
    calculates the average value, and logs the result to a list.

    Parameters:
    - folder (str): Path to the folder containing GeoTIFF files.
    - lat (float): Latitude of the point to sample.
    - lon (float): Longitude of the point to sample.
    - source (string): Which naming scheme should be followd to extract date
    - radius (float): Radius in meters around the point to sample. Default is 25 meters.

    Returns:
    - list: List of dictionaries with filename, date (extracted from filename), and average value.
    """
    results = []
    point = Point(lon, lat)
    transformer = Transformer.from_crs("EPSG:4326", "EPSG:32632", always_xy=True)  # Adjust the EPSG code as necessary
    point_transformed = transformer.transform(lon, lat)

    for filename in os.listdir(folder):
        if filename.endswith(".tif"):
            file_path = os.path.join(folder, filename)

            with rasterio.open(file_path) as src:
                transform = src.transform
                crs = src.crs

                # Transform the point to the CRS of the GeoTIFF
                point_in_crs = transformer.transform(lon, lat, crs=crs)
                point_geometry = Point(point_in_crs)

                # Calculate the bounding box for the sampling radius
                minx = point_in_crs[0] - radius
                miny = point_in_crs[1] - radius
                maxx = point_in_crs[0] + radius
                maxy = point_in_crs[1] + radius

                # Create a window from the bounding box
                window = from_bounds(minx, miny, maxx, maxy, transform=src.transform)
                data = src.read(1, window=window)

                # Mask nodata values and calculate the mean
                mask = geometry_mask([point_geometry], transform=src.transform, invert=True, out_shape=(data.shape[0], data.shape[1]))
                masked_data = np.ma.masked_array(data, mask=mask)

                if not masked_data.mask.all():
                    average_value = masked_data.mean()

                    date = extract_date_from_filename(filename, source)

                    results.append({
                        'filename': filename,
                        'date': date,
                        'average_value': average_value
                    })

    return results

def extract_date_from_filename(filename, source):
    """
    Extracts date string from filenames

    Parameters:
    - filename: (string) filename on a usgs product
    - source: (string) source of filename. Determines how funcion extracts date string

    Returns:
    - date string: YYYYMMDD date string
    """

    def extract_usgs(filename):
        match = re.search(r'\d{8}', filename)
        if match:
            return match.group(0)
        else:
            raise ValueError("Input does not match USGS naming convention")

    def extract_metric(filename):
        match = re.search(r'\((\d{8})\)', filename)
        if match:
            return match.group(1)
        else:
            raise ValueError("Input does not match METRIC naming convention")

    
    if f"{source}_extract" in globals():
        return globals()[f"{source}_extract"](filename)
    else:
        raise ValueError(f"Extraction option for {source} does not exist.")


def save_results_to_csv(results, output_csv):
    """
    Saves the sampling results to a CSV file.

    Parameters:
    - results (list): List of dictionaries containing filename, date, and average value.
    - output_csv (str): Path to the output CSV file.
    """
    with open(output_csv, mode='w', newline='') as csv_file:
        fieldnames = ['filename', 'date', 'average_value']
        writer = csv.DictWriter(csv_file, fieldnames=fieldnames)

        writer.writeheader()
        for result in results:
            writer.writerow(result)

# Example usage:
folder = "path/to/geotiffs"
lat, lon = 55.0, 12.0
source = 'usgs'
output_csv = "output/results.csv"

results = sample_geotiffs_in_radius(folder, lat, lon, source)
save_results_to_csv(results, output_csv)
