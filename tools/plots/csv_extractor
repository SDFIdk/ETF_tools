import os
import re
import csv
import sys
import glob
import rasterio as rio
import numpy as np
from shapely.geometry import Point
from rasterio.features import geometry_mask
from rasterio.windows import from_bounds
from pyproj import Transformer

def sample_geotiffs_in_radius(folder, lat, lon, model, radius=100, et_extension = '*.tif'):
    """
    Samples GeoTIFFs in a specified folder within a radius around a given lat/lon point,
    calculates the average value, and logs the result to a list.

    Parameters:
    - folder (str): Path to the folder containing GeoTIFF files.
    - lat (float): Latitude of the point to sample.
    - lon (float): Longitude of the point to sample.
    - model (string): Which naming scheme should be followd to extract date
    - radius (float): Radius in meters around the point to sample. Default is 25 meters.

    Returns:
    - list: List of dictionaries with filename, date (extracted from filename), and average value.
    """

    results = []
    for filename in glob.glob(folder + et_extension):
        if filename.endswith(".tif"):
            file_path = os.path.join(folder, filename)

            with rio.open(file_path) as src:
                transform = src.transform

                transformer = Transformer.from_crs("EPSG:4326", 'EPSG:32632', always_xy=True)
                point_transformed = transformer.transform(lat, lon)
                point_geometry = Point(point_transformed)

                minx = point_transformed[0] - radius
                miny = point_transformed[1] - radius
                maxx = point_transformed[0] + radius
                maxy = point_transformed[1] + radius

                window = from_bounds(minx, miny, maxx, maxy, transform=transform)
                data = src.read(1, window=window)

                mask = geometry_mask([point_geometry], transform=transform, invert=True, out_shape=(data.shape[0], data.shape[1]))
                masked_data = np.ma.masked_array(data, mask=mask)

                if not masked_data.mask.all():
                    average_value = masked_data.mean()

                    date = extract_date_from_filename(filename, model)

                    results.append({
                        'filename': filename,
                        'date': date,
                        'average_value': average_value
                    })

    print(results)
    sys.exit()

    return results


def extract_date_from_filename(filename, model):
    """
    Extracts date string from filenames

    Parameters:
    - filename: (string) filename on a usgs product
    - model: (string) source of filename. Determines how funcion extracts date string

    Returns:
    - date string: YYYYMMDD date string
    """

    def extract_sseb(filename):
        match = re.search(r'\d{8}', filename)
        if match:
            return match.group(0)
        else:
            raise ValueError("Input does not match SSEB naming convention")

    def extract_metric(filename):
        match = re.search(r'\((\d{8})\)', filename)
        if match:
            return match.group(1)
        else:
            raise ValueError("Input does not match METRIC naming convention")

    extraction_functions = {
        "sseb": extract_sseb,
        "metric": extract_metric,
    }
    
    if model in extraction_functions:
        return extraction_functions[model](filename)
    else:
        raise ValueError(f"Extraction option for {model} does not exist.")


def save_results_to_csv(results, output_csv):
    """
    Saves the sampling results to a CSV file.

    Parameters:
    - results (list): List of dictionaries containing filename, date, and average value.
    - output_csv (str): Path to the output CSV file.
    """
    with open(output_csv, mode='w', newline='') as csv_file:
        fieldnames = ['filename', 'date', 'average_value']
        writer = csv.DictWriter(csv_file, fieldnames=fieldnames)

        writer.writeheader()
        for result in results:
            writer.writerow(result)

# Example usage:
et_file_dir = "J:/javej/drought/drought_et/SSEB_files/"
et_file_dir = "J:/javej/drought/drought_et/adjusted_SSEB/"

model = 'sseb'
et_extension = '*.tif'
# et_extension = '*_ETA.tif'

output_dir = "J:/javej/drought/drought_et/time_series/"

#lon, lat and directory in the et_file dir
et_sample_points = [
    (55.484757, 11.642088, 'soroe'),
    (56.038813, 9.160688, 'voulund'),
    (55.913856, 8.401428, 'skjern'),
    (56.075209, 9.333798, 'gludsted')
]

for data in et_sample_points:
    lon, lat, location = data

    data_collection = os.path.basename(os.path.normpath(et_file_dir))

    output_csv = os.path.join(output_dir, f'{model}_{data_collection}_{location}')

    results = sample_geotiffs_in_radius(
        os.path.join(et_file_dir, location + '/'), 
        lat, 
        lon, 
        model, 
        et_extension=et_extension
    )

    save_results_to_csv(results, output_csv)
